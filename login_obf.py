import base64; exec(base64.b64decode('aW1wb3J0IG9zCmltcG9ydCBib3QKaW1wb3J0IHRpbWUgICMgVGjDqm0gdGjGsCB2aeG7h24gdGltZSDEkeG7gyBz4butIGThu6VuZyBzbGVlcApmcm9tIGNvbG9yYW1hIGltcG9ydCBpbml0LCBGb3JlLCBCYWNrLCBTdHlsZQoKIyBLaOG7n2kgdOG6oW8gY29sb3JhbWEgKGNobyBXaW5kb3dzIHbDoCBjw6FjIG7hu4FuIHThuqNuZyBraMOhYykKaW5pdChhdXRvcmVzZXQ9VHJ1ZSkKCmRlZiBzaG93X2FjY291bnRfbGlzdChmaWxlX3BhdGgpOgogICAgIiIiCiAgICDEkOG7jWMgdsOgIGhp4buDbiB0aOG7iyBkYW5oIHPDoWNoIHTDoGkga2hv4bqjbiB04burIGZpbGUgduG7m2kgbcOgdSBz4bqvYywKICAgIGNo4buJIGhp4buDbiB0aOG7iyB0w6puIMSRxINuZyBuaOG6rXAgKHVzZXJuYW1lKSB2w6Ag4bqpbiBt4bqtdCBraOG6qXUsCiAgICDEkeG7k25nIHRo4budaSDEkcOzbmcga2h1bmcgZGFuaCBzw6FjaCB0w6BpIGtob+G6o24uCiAgICBC4buPIHF1YSBuaOG7r25nIGTDsm5nIHRy4buRbmcsIG5o4buvbmcgZMOybmcgYuG6r3QgxJHhuqd1IGLhurFuZyAnIycgaG/hurdjIGNo4bupYSB04burIGtow7NhICdza2lwJy4KICAgICIiIgogICAgcHJpbnQoRm9yZS5DWUFOICsgIi0iICogNTApCiAgICBwcmludChTdHlsZS5CUklHSFQgKyAiQVVUTyBMT0dJTiBIUk1TICYgUE1JUyBCWSBLSE9BVEEgVkVSIDIuMCIpCiAgICBwcmludChGb3JlLkNZQU4gKyAiLSIgKiA1MCkKICAgIHByaW50KCkKICAgIHByaW50KEZvcmUuQ1lBTiArICJEYW5oIHPDoWNoIHTDoGkga2hv4bqjbiBoaeG7h24gY8OzOiIsIGZpbGVfcGF0aCkKICAgIGFjY291bnRzID0gW10gICMgRGFuaCBzw6FjaCBjw6FjIHVzZXJuYW1lIHNhdSBraGkgbOG7jWMKICAgIHRyeToKICAgICAgICB3aXRoIG9wZW4oZmlsZV9wYXRoLCAncicsIGVuY29kaW5nPSd1dGYtOCcpIGFzIGY6CiAgICAgICAgICAgIGZvciBsaW5lIGluIGY6CiAgICAgICAgICAgICAgICBsaW5lID0gbGluZS5zdHJpcCgpCiAgICAgICAgICAgICAgICBpZiBub3QgbGluZToKICAgICAgICAgICAgICAgICAgICBjb250aW51ZSAgIyBC4buPIHF1YSBkw7JuZyB0cuG7kW5nCiAgICAgICAgICAgICAgICBpZiBsaW5lLnN0YXJ0c3dpdGgoJyMnKSBvciAnc2tpcCcgaW4gbGluZS5sb3dlcigpOgogICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlICAjIELhu48gcXVhIGTDsm5nIGtow7RuZyBj4bqnbiDEkeG7jWMKICAgICAgICAgICAgICAgIHBhcnRzID0gbGluZS5zcGxpdCgnfCcpCiAgICAgICAgICAgICAgICBpZiBsZW4ocGFydHMpID49IDE6CiAgICAgICAgICAgICAgICAgICAgdXNlcm5hbWUgPSBwYXJ0c1swXQogICAgICAgICAgICAgICAgICAgIGFjY291bnRzLmFwcGVuZCh1c2VybmFtZSkKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAiRMOybmcgc2FpIMSR4buLbmggZOG6oW5nOiAiICsgbGluZSkKICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICBwcmludChGb3JlLlJFRCArICJLaMO0bmcgdGjhu4MgxJHhu41jIGZpbGUgZGFuaCBzw6FjaCB0w6BpIGtob+G6o246Iiwgc3RyKGUpKQogICAgICAgIHJldHVybgoKICAgICMgVMOtbmggY2hp4buBdSBkw6BpIHThu5FpIMSRYSBj4bunYSB1c2VybmFtZSDEkeG7gyB4w6J5IGThu7FuZyBraHVuZyDEkeG6uXAKICAgIG1heF9sZW5ndGggPSBtYXgobGVuKHVzZXJuYW1lKSBmb3IgdXNlcm5hbWUgaW4gYWNjb3VudHMpIGlmIGFjY291bnRzIGVsc2UgMAoKICAgICMgWMOieSBk4buxbmcgxJHGsOG7nW5nIHZp4buBbiBuZ2FuZyB0csOqbiB2w6AgZMaw4bubaSBraHVuZwogICAgaG9yaXpvbnRhbF9ib3JkZXJfdG9wID0gRm9yZS5DWUFOICsgIuKUjCIgKyAi4pSAIiAqIChtYXhfbGVuZ3RoICsgMikgKyAi4pSQIgogICAgaG9yaXpvbnRhbF9ib3JkZXJfYm90dG9tID0gRm9yZS5DWUFOICsgIuKUlCIgKyAi4pSAIiAqIChtYXhfbGVuZ3RoICsgMikgKyAi4pSYIgoKICAgICMgSGnhu4NuIHRo4buLIGtodW5nIGRhbmggc8OhY2ggdMOgaSBraG/huqNuCiAgICBwcmludChob3Jpem9udGFsX2JvcmRlcl90b3ApCiAgICAjIEluIHRpw6p1IMSR4buBIChu4bq/dSBtdeG7kW4pIGhv4bq3YyBpbiB0cuG7sWMgdGnhur9wIGPDoWMgdMOgaSBraG/huqNuCiAgICBmb3IgdXNlcm5hbWUgaW4gYWNjb3VudHM6CiAgICAgICAgIyBDYW5oIGzhu4EgdHLDoWksIHRow6ptIGtob+G6o25nIGPDoWNoIMSR4buDIGtodW5nIHRyw7RuZyDEkeG7gXUKICAgICAgICBwcmludChGb3JlLkNZQU4gKyAi4pSCICIgKyBGb3JlLllFTExPVyArIHVzZXJuYW1lLmxqdXN0KG1heF9sZW5ndGgpICsgRm9yZS5DWUFOICsgIiDilIIiKQogICAgcHJpbnQoaG9yaXpvbnRhbF9ib3JkZXJfYm90dG9tKQogICAgcHJpbnQoKSAgIyBJbiB0aMOqbSBkw7JuZyB0cuG7kW5nIHNhdSBraHVuZwoKZGVmIHNob3dfbWVudSgpOgogICAgcHJpbnQoRm9yZS5NQUdFTlRBICsgIj0iICogNTApCiAgICBwcmludChGb3JlLldISVRFICsgIjEuIMSQxINuZyBuaOG6rXAgdsOgbyBIUk1TICg1IGzhuqduKSIpCiAgICBwcmludChGb3JlLldISVRFICsgIjIuIMSQxINuZyBuaOG6rXAgdsOgbyBQTUlTICgxMCBs4bqnbikiKQogICAgcHJpbnQoRm9yZS5XSElURSArICIzLiBUaG/DoXQiKQogICAgcHJpbnQoRm9yZS5NQUdFTlRBICsgIj0iICogNTApCgpkZWYgbG9naW5fcHJvY2VzcyhmaWxlX3BhdGgsIHN5c3RlbSk6CiAgICAiIiIKICAgIMSQ4buNYyBmaWxlIERTIHTDoGkga2hv4bqjbiB2w6AgdGjhu7FjIGhp4buHbiDEkcSDbmcgbmjhuq1wIGNobyB04burbmcgdMOgaSBraG/huqNuLgogICAgSGnhu4NuIHRo4buLIGvhur90IHF14bqjIHbhu5tpIG3DoHUgc+G6r2MgY2hvIHThu6tuZyB0cuG6oW5nIHRow6FpLgogICAgIiIiCiAgICBwcmludCgiXG4iICsgRm9yZS5DWUFOICsgZiLEkGFuZyB44butIGzDvSB0csOqbiB7c3lzdGVtfToiKQogICAgdHJ5OgogICAgICAgIHdpdGggb3BlbihmaWxlX3BhdGgsICdyJywgZW5jb2Rpbmc9J3V0Zi04JykgYXMgZmlsZToKICAgICAgICAgICAgbGluZXMgPSBmaWxlLnJlYWRsaW5lcygpCiAgICAgICAgICAgIGZvciBsaW5lIGluIGxpbmVzOgogICAgICAgICAgICAgICAgbGluZSA9IGxpbmUuc3RyaXAoKQogICAgICAgICAgICAgICAgIyBC4buPIHF1YSBkw7JuZyB0cuG7kW5nCiAgICAgICAgICAgICAgICBpZiBub3QgbGluZToKICAgICAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICAgICAgIyBC4buPIHF1YSBjw6FjIGTDsm5nIGLhuq90IMSR4bqndSBi4bqxbmcgJyMnIGhv4bq3YyBjaOG7qWEgdOG7qyBraMOzYSAnc2tpcCcKICAgICAgICAgICAgICAgIGlmIGxpbmUuc3RhcnRzd2l0aCgnIycpIG9yICdza2lwJyBpbiBsaW5lLmxvd2VyKCk6CiAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICB1c2VyLCBwYXNzd29yZCA9IGxpbmUuc3BsaXQoJ3wnKQogICAgICAgICAgICAgICAgZXhjZXB0IFZhbHVlRXJyb3I6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyBmIkzhu5dpIMSR4buLbmggZOG6oW5nIGTDsm5nOiB7bGluZX0iKQogICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgICAgICBwcmludCgiXG4iICsgRm9yZS5CTFVFICsgZiLEkGFuZyDEkcSDbmcgbmjhuq1wIHTDoGkga2hv4bqjbjoge3VzZXJ9IikKCiAgICAgICAgICAgICAgICAjIFPhu5EgbOG6p24gxJHEg25nIG5o4bqtcCB0w7l5IHRodeG7mWMgdsOgbyBo4buHIHRo4buRbmcKICAgICAgICAgICAgICAgIGlmIHN5c3RlbSA9PSAiSFJNUyI6CiAgICAgICAgICAgICAgICAgICAgbnVtX2F0dGVtcHRzID0gNQogICAgICAgICAgICAgICAgZWxpZiBzeXN0ZW0gPT0gIlBNSVMiOgogICAgICAgICAgICAgICAgICAgIG51bV9hdHRlbXB0cyA9IDEwCgogICAgICAgICAgICAgICAgZm9yIGF0dGVtcHQgaW4gcmFuZ2UoMSwgbnVtX2F0dGVtcHRzICsgMSk6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5ZRUxMT1cgKyBmIkzhuqduIHRo4bupIHthdHRlbXB0fS4uLiIpCiAgICAgICAgICAgICAgICAgICAgaWYgc3lzdGVtID09ICJIUk1TIjoKICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBib3QubG9naW4odXNlciwgcGFzc3dvcmQpCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICdsb2dvdXQnIGluIHJlc3BvbnNlLmxvd2VyKCk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLkdSRUVOICsgZiItLT4ge3VzZXJ9IMSRxINuZyBuaOG6rXAgdGjDoG5oIGPDtG5nISIpCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArIGYiLS0+IHt1c2VyfSBzYWkgdXNlciBob+G6t2MgcGFzc3dvcmQuIikKICAgICAgICAgICAgICAgICAgICBlbGlmIHN5c3RlbSA9PSAiUE1JUyI6CiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gYm90LmxvZ2luX3BtaXModXNlciwgcGFzc3dvcmQpCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICJ0aG/DoXQiIGluIHJlc3BvbnNlLmxvd2VyKCk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLkdSRUVOICsgZiItLT4ge3VzZXJ9IMSRxINuZyBuaOG6rXAgdGjDoG5oIGPDtG5nISIpCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArIGYiLS0+IHt1c2VyfSBzYWkgdXNlciBob+G6t2MgcGFzc3dvcmQuIikKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAjIFRo4budaSBnaWFuIGNo4budIDMgZ2nDonkgZ2nhu69hIGPDoWMgbOG6p24gxJHEg25nIG5o4bqtcAogICAgICAgICAgICAgICAgICAgIHRpbWUuc2xlZXAoMykKCiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAiQ8OzIGzhu5dpIHjhuqN5IHJhIGtoaSDEkeG7jWMgZmlsZToiLCBzdHIoZSkpCgpkZWYgbWFpbigpOgogICAgIyBGaWxlIGRhbmggc8OhY2ggdMOgaSBraG/huqNuIGPhu5EgxJHhu4tuaCBu4bqxbSBjw7luZyB0aMawIG3hu6VjCiAgICBkYXRhX2ZpbGUgPSAiZGFuaHNhY2h0ay50eHQiCiAgICAKICAgICMgS2nhu4NtIHRyYSBmaWxlIHThu5NuIHThuqFpCiAgICBpZiBub3Qgb3MucGF0aC5pc2ZpbGUoZGF0YV9maWxlKToKICAgICAgICBwcmludChGb3JlLlJFRCArICJLaMO0bmcgdMOsbSB0aOG6pXkgZmlsZSBkYW5oc2FjaHRrLnR4dCB0cm9uZyB0aMawIG3hu6VjIGhp4buHbiBow6BuaCEiKQogICAgICAgIHJldHVybgogICAgCiAgICAjIEhp4buDbiB0aOG7iyBkYW5oIHPDoWNoIHTDoGkga2hv4bqjbiB04burIGZpbGUgdHLGsOG7m2MKICAgIHNob3dfYWNjb3VudF9saXN0KGRhdGFfZmlsZSkKICAgIAogICAgd2hpbGUgVHJ1ZToKICAgICAgICBzaG93X21lbnUoKQogICAgICAgIGNob2ljZSA9IGlucHV0KEZvcmUuQ1lBTiArICJDaOG7jW4gY2jhu6ljIG7Eg25nICgxLzIvMyk6ICIpLnN0cmlwKCkKICAgICAgICBpZiBjaG9pY2UgPT0gJzEnOgogICAgICAgICAgICBsb2dpbl9wcm9jZXNzKGRhdGFfZmlsZSwgIkhSTVMiKQogICAgICAgIGVsaWYgY2hvaWNlID09ICcyJzoKICAgICAgICAgICAgbG9naW5fcHJvY2VzcyhkYXRhX2ZpbGUsICJQTUlTIikKICAgICAgICBlbGlmIGNob2ljZSA9PSAnMyc6CiAgICAgICAgICAgIHByaW50KEZvcmUuTUFHRU5UQSArICLEkMOjIHRob8OhdCBjaMawxqFuZyB0csOsbmguIEJ5ZSEiKQogICAgICAgICAgICBicmVhawogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgIkzhu7FhIGNo4buNbiBraMO0bmcgaOG7o3AgbOG7hy4gVnVpIGzDsm5nIGNo4buNbiBs4bqhaS4iKQoKaWYgX19uYW1lX18gPT0gIl9fbWFpbl9fIjoKICAgIG1haW4oKQ==').decode())